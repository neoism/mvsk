module Liz
  class Lexer
    module Keywords
      RESERVED_WORDS = {
        :if => Token::If,
        :else => Token::Else,
        :switch => Token::Switch,
        :case => Token::Case,
        :default => Token::Default,
        :for => Token::For,
        :in => Token::In,
        :loop => Token::Loop,
        :break => Token::Break,
        :continue => Token::Continue,
        :class => Token::Class,
        :extends => Token::Extends,
        :super => Token::Super,
        :self => Token::Self,
        :get => Token::Get,
        :set => Token::Set,
        :fun => Token::Fun,
        :return => Token::Return,
        :let => Token::Let,
        :mut => Token::Mut,
        :is => Token::Is,
        :not => Token::Not,
        :import => Token::Import,
        :as => Token::As,
        :throw => Token::Throw,
        :try => Token::Try
      }
    end
  end
end

# var tokens = [...]string{
#   Int:         "<int>",
#   Float:       "<float>",
#   Complex:     "<complex>",
#   Identifier:  "Identifier",
#   String:      "<string>",
#   Rune:        "<rune>",
#   Bool:        "<bool>",
#   Nil:         "nil",
#   Plus:        "+",
#   Minus:       "-",
#   Star:        "*",
#   Slash:       "/",
#   Modulo:      "%",
#   Question:    "?",
#   QuestionDot: "?.",
#   HashBang:    "#!",
#   AndAnd:      "&&",
#   OrOr:        "||",
#   And:         "&",
#   Or:          "|",
#   Dot:         ".",
#   Semi:        ";",
#   Colon:       ":",
#   LeftParen:   "(",
#   LeftSquare:  "[",
#   LeftBrace:   "{",
#   RightParen:  ")",
#   RightSquare: "]",
#   RightBrace:  "}",
#   BackQuote:   "`",
#   Pipeline:    "|>",
#   Comma:       ",",
#   Bang:        "!",
#   BangEq:      "!=",
#   Equal:       "=",
#   EqualEq:     "==",
#   Greater:     ">",
#   GreaterEq:   ">=",
#   Less:        "<",
#   LessEq:      "<=",
#   AndAndEq:    "&&=",
#   OrOrEq:      "||=",
#   Tilde:       "~",
#   Println:     "println",
#   Illegal:     "Illegal",
#   EOF:         "EOF",
